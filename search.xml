<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ENGLISH]]></title>
    <url>%2F2019%2F12%2F08%2FENGLISH%2F</url>
    <content type="text"><![CDATA[NGSL词汇表 每天背考研单词，逛国外得网站学英语，看英文技术文档]]></content>
  </entry>
  <entry>
    <title><![CDATA[ES6学习笔记]]></title>
    <url>%2F2019%2F11%2F30%2FES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89%2F</url>
    <content type="text"><![CDATA[理解ES 全称: ECMAScript js语言的规范 我们用的js是它的实现 ES6 2个新的关键字 let/const 块作用域 没有变量提升 不能重复定义 值不可变 变量的解构赋值 将包含多个数据的对象(数组)一次赋值给多个变量 数据源: 对象/数组 目标: {a, b}/[a, b] 各种数据类型的扩展 字符串 模板字符串 作用: 简化字符串的拼接 模板字符串必须用`` 变化的部分使用${xxx}定义 contains(str) : 判断是否包含指定的字符串 startsWith(str) : 判断是否以指定字符串开头 endsWith(str) : 判断是否以指定字符串结尾 repeat(count) : 重复指定次数 对象 简化的对象写法 123456789let name = &apos;Tom&apos;;let age = 12;let person = &#123; name, age, setName (name) &#123; this.name = name; &#125;&#125;; Object.assign(target, source1, source2..) : 将源对象的属性复制到目标对象上 Object.is(v1, v2) : 判断2个数据是否完全相等 proto属性 : 隐式原型属性 数组 Array.from(v) : 将伪数组对象或可遍历对象转换为真数组 Array.of(v1, v2, v3) : 将一系列值转换成数组 find(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素 findIndex(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素下标 函数 箭头函数 用来定义匿名函数 基本语法: 没有参数: () =&gt; console.log(‘xxxx’) 一个参数: i =&gt; i+2 大于一个参数: (i,j) =&gt; i+j 函数体不用大括号: 默认返回结果 函数体如果有多个语句, 需要用{}包围 使用场景: 多用来定义回调函数 形参的默认值 定义形参时指定其默认的值 rest(可变)参数 通过形参左侧的…来表达, 取代arguments的使用 扩展运算符(…) 可以分解出数组或对象中的数据 set/Map容器结构 容器: 能保存多个数据的对象, 同时必须具备操作内部数据的方法 任意对象都可以作为容器使用, 但有的对象不太适合作为容器使用(如函数) Set的特点: 保存多个value, value是不重复 ====&gt;数组元素去重 Map的特点: 保存多个key–value, key是不重复, value是可以重复的 API Set()/Set(arr) //arr是一维数组 add(value) delete(value) clear(); has(value) size Map()/Map(arr) //arr是二维数组 set(key, value) delete(key) clear() has(key) size for–of循环 可以遍历任何容器 数组 对象 伪/类对象 字符串 可迭代的对象 Promise 解决回调地狱(回调函数的层层嵌套, 编码是不断向右扩展, 阅读性很差) 能以同步编码的方式实现异步调用 在es6之前原生的js中是没这种实现的, 一些第三方框架(jQuery)实现了promise ES6中定义实现API: 1234567891011121314// 1. 创建promise对象var promise = new Promise(function(resolve, reject)&#123; // 做异步的操作 if(成功) &#123; // 调用成功的回调 resolve(result); &#125; else &#123; // 调用失败的回调 reject(errorMsg); &#125; &#125;) // 2. 调用promise对象的then()promise.then(function( result =&gt; console.log(result), errorMsg =&gt; alert(errorMsg))) class类 用 class 定义一类 用 constructor() 定义构造方法(相当于构造函数) 一般方法: xxx () {} 用extends来定义子类 用super()来父类的构造方法 子类方法自定义: 将从父类中继承来的方法重新实现一遍 js中没有方法重载(方法名相同, 但参数不同)的语法 转自尚硅谷es6教程]]></content>
      <categories>
        <category>learn</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[GIT常用命令]]></title>
    <url>%2F2019%2F07%2F21%2FGIT%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[基础操作命令切换到指定文件夹1$ cd xxx(路径) 返回上层路径1$ cd .. 将当前目录变成git可以管理的仓库1$ git init 将文件添加到git仓库（暂存区）1$ git add xxx（文件名及后缀） 将文件提交到仓库，-m后面跟本次提交说明1$ git commit -m "注释内容" 查看当前仓库状态1$ git status 查看具体修改的内容1$ git diff xxx（文件名及后缀） 查看最近到最远的提交日志1$ git log 简化git log输出内容,前面的一大串16进制数是commit id1$ git log --pretty=oneline 回退到上一个版本1$ git reset --hard HEAD^ 回退到指定版本1$ git reset --hard 版本号（commit id） 记录每一次命令，确定回退版本号1$ git reflog .git文件夹详解.git是git的版本库，有stage或者叫index的暂存区，还会自动创建第一个分之master（主分支）和指向master的头指针HEADUntracked 状态指没有被添加过可以向暂存区添加多个文件一起提交到仓库 丢弃工作区的修改1$ git checkout -- file 可以把暂存区的修改撤销掉1$ git reset HEAD file 删除文件1$ rm file 从版本库中删除文件1$ git commit -m "" 用版本库里的版本替换工作区版本，可以用于恢复被误删的文件1$ git checkout -- file 创建远程仓库1$ ssh-keygen -t rsa -C "youremail"//创建ssh key，一路回车，不用设置密码 .ssh文件夹下的id_rsa是私人密钥，id_rsa.pub是公钥 在github上面创建远程仓库，与本地仓库关联1$ git remote add origin git@github.com:自己账户名/仓库名.git //origin是远程仓库名字，如果报错用git init初始化仓库 1$ git push -u origin master //将本地仓库内容推送到远程仓库-u 参数会将本地和远程分之关联起来，在以后的推送或者拉取时就可以简化命令 1$ git push origin master //本地修改后通过这条命令将本地master分支推送到github 先创建远程库，然后从远程库克隆123$ git clone ssh密钥$ cd 切换到指定文件夹$ ls //查看当前目录下详情 分支创建并切换到当前分支1$ git checkout -b xxx(分支名字) 创建分支1$ git branch xxx 切换分支1$ git checkout xxx 列出所有分支，当前分支前面会有*号标记1$ git branch 分支操作1$ git branch master//切换到主分支 1$ git merge xxx//将分支的工作成果合并到master分支上 1$ git branch -d xxx//合并完成后删除分支 查看分支合并图1$ git log --graph 标签创建标签先切换到需要标签的分支上然后 1$ git tag (标签名) 1$ git tag //查看内容 查看历史提交1$ git log --pretty=oneline --abbrev-commit 对指定commit id打标签1$ git tag 标签名 commit id 查看标签信息1$ git show 标签名 删除标签1$ git tag -d 标签名 推送标签到远程仓库1$ git push origin(远程仓库名字) 标签名 一次性推送所有未推送到远程的本地标签1$ git push origin --tags 标签已经推送到远程，要删除先删除本地1$ git tag -d 标签名 然后从远程删除 1$ git push origin :refs/tags/标签名 查看远程库信息1$ git remote -v 删除远程库1$ git remote rm origin]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>GIT</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello]]></title>
    <url>%2F2019%2F07%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to My Blog This is My very first post. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
        <tag>hello world</tag>
      </tags>
  </entry>
</search>
